
/**
 * Find the missing number with hash.
 *
 * First we create an array to store hash codes. The array contains the hash value of the
 * missing number. Then, we initialize every element in this array to be 0's. Next, assign 
 * 1's in the corresponding indices, which are the elements in nums array.
 * e.g., nums = {3, 0, 1}. Then hash array = {1, 1, 0, 1} since 3 => last index, 0 => 0th 
 * index, and 1 => 1st index.
 * Finally, traverse the hash array and find 0's position, which is the missing number.
 */
int missingNumber(int* nums, int numsSize){
    const int INITIALIZED_HASH_CODE = 0;
    int* hash = (int*) malloc(sizeof(int) * (numsSize + 1));
    
    for(int i = 0; i < numsSize + 1; i++){
        hash[i] = INITIALIZED_HASH_CODE;
    }
    
    for(int i = 0; i < numsSize; i++){
        hash[nums[i]] = 1;
    }
    
    int missingNumber = -1;
    for(int i = 0; i < numsSize + 1; i++){
        if(hash[i] == INITIALIZED_HASH_CODE){
            missingNumber = i;
            break;
        }
    }
    
    return missingNumber;
}